import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { AppRouterCacheProvider } from "@mui/material-nextjs/v15-appRouter";
import "./globals.css";
import AuthContextProvider from "@/context/AuthContext";
import PeerContextProvider from "@/context/PeerContext";
import { ToastContainer } from "react-toastify";
import { cookies } from "next/headers";
import jwt from "jsonwebtoken";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const cookiesStore = await cookies();
  const token = cookiesStore.get("token");
  let user = null;
  const jwtSecret = process.env.JWT_SECRET;
  if (token?.value && jwtSecret) {
    try {
      const payload = jwt.verify(token.value, jwtSecret) as UserType;
      user = {
        username: payload.username,
      };
    } catch (error) {}
  }

  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <ToastContainer />
        <AppRouterCacheProvider>
          <AuthContextProvider user={user}>
            <PeerContextProvider>{children}</PeerContextProvider>
          </AuthContextProvider>
        </AppRouterCacheProvider>
      </body>
    </html>
  );
}
